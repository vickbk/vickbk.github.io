@use "sass:string";
@use "sass:list";
@use "sass:meta";

$units: "em" "px" "rem" "vh" "%" "vw" "cm" "pt" "pc" "vmin" "vmax" "ex" "ch"
  "deg" "rad" "grad" "turn"; // if some units are missing they need to be added

$number-list: "0123456789";

@function is-numeric($string, $has-decimal: false, $is-negative: false) {
  @if meta.type-of($string) == number {
    @return true;
  }
  $str-length: string.length($string);
  @if $str-length == 0 {
    @return false;
  }
  @if list.index($units, $string) or
    ($str-length == 1 and string.index($number-list, $string))
  {
    @return true;
  }
  $first-char: string.slice($string, 1, 1);
  @if $first-char == "." and $has-decimal == false {
    @return is-numeric(string.slice($string, 2), true, $is-negative);
  } @else if $first-char == "." {
    @return false;
  }
  @if ($first-char == "-" and $is-negative == false) or
    string.index($number-list, $first-char)
  {
    @if $first-char == "-" {
      $is-negative: true;
    }
    @return is-numeric(string.slice($string, 2), $has-decimal, $is-negative);
  }
  @return false;
}

// @function is-numeric-string($string) {
//   $is-number: true;
//   $has-decimal: false;

//   @for $i from 1 through str-length($string) {
//     $char: str-slice($string, $i, $i);

//     @if not index("0123456789", $char) {
//       @if $char == "." and not $has-decimal {
//         $has-decimal: true;
//       } @else if ($char == "+" or $char == "-") and $i == 1 {
//         // Allow leading sign
//       } @else {
//         $is-number: false;
//         @return false; // Exit loop if non-numeric character found
//       }
//     }
//   }
//   @return $is-number;
// }

// // Usage example:
// $my-string-number: "123.45";
// $my-string-text: "hello";

// @if is-numeric-string($my-string-number) {
//   // Do something with the number
//   width: to-number($my-string-number) +
//     px; // You'd need a custom to-number function too
// } @else {
//   // Handle non-numeric string
//   color: red;
// }
